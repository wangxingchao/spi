diff --git a/arch/arm/mach-s3c64xx/mach-smdk6410.c b/arch/arm/mach-s3c64xx/mach-smdk6410.c
index b79ae73..1bf9d12 100755
--- a/arch/arm/mach-s3c64xx/mach-smdk6410.c
+++ b/arch/arm/mach-s3c64xx/mach-smdk6410.c
@@ -194,7 +194,7 @@ static struct platform_device s3c_device_dm9000 = {
 /*add by fatfish for mcp251x*/
 static int request_cs_gpio;
 static void  cs_set_level(unsigned line_id, int lvl) {
- 	printk(KERN_INFO "SPI: cs set level\n");
+ 	//printk(KERN_INFO "SPI: cs set level\n");
     	gpio_direction_output(line_id, lvl);
 };
 
@@ -204,23 +204,59 @@ static struct s3c64xx_spi_csinfo s3c64xx_spi1_csinfo = {
   	.set_level=cs_set_level,
 };
 
+static void cfg_fpga_pro(int val)
+{
+    	gpio_direction_output(S3C64XX_GPP(12), val);
+}
+
 static void setup_pin_cs0(void)
 {
 	int ret;
+	//ret = gpio_request(S3C64XX_GPP(8), "CS0");
 	ret = gpio_request(S3C64XX_GPC(3), "CS0");
 	if (ret) {
 		printk(KERN_ERR "SPI: Setup CS-Pin0 Error\n");
 	}
 	printk(KERN_INFO "SPI: Set output pin 3 enabled\n");
+	//s3c_gpio_setpull(S3C64XX_GPP(8), S3C_GPIO_PULL_UP);	// Manual chip select pin as used in 6410_set_cs
 	s3c_gpio_setpull(S3C64XX_GPC(3), S3C_GPIO_PULL_NONE);	// Manual chip select pin as used in 6410_set_cs
 	s3c_gpio_cfgpin(S3C64XX_GPC(3), S3C_GPIO_OUTPUT);		// Manual chip select pin as used in 6410_set_cs
+	//s3c_gpio_cfgpin(S3C64XX_GPP(8), S3C_GPIO_OUTPUT);		// Manual chip select pin as used in 6410_set_cs
+};
+
+static void setup_spi_fpga(void)
+{
+	int ret;
+	printk(KERN_INFO "SPI: setup fpga initialization\n");
+#if 0
+	ret = gpio_request(S3C64XX_GPP(8), "FPGACS");
+	if (ret) {
+		printk(KERN_ERR "SPI: Setup FPGACS Error\n");
+	}
+	s3c_gpio_setpull(S3C64XX_GPP(8), S3C_GPIO_PULL_NONE);	// Manual chip select pin as used in 6410_set_cs
+	s3c_gpio_cfgpin(S3C64XX_GPP(8), S3C_GPIO_OUTPUT);		// Manual chip select pin as used in 6410_set_cs
+#endif
+	ret = gpio_request(S3C64XX_GPP(12), "FPGAPRO");
+	if (ret) {
+		printk(KERN_ERR "SPI: Setup FPGAPRO Error\n");
+	}
+	s3c_gpio_setpull(S3C64XX_GPP(12), S3C_GPIO_PULL_UP);	// Manual chip select pin as used in 6410_set_cs
+	s3c_gpio_cfgpin(S3C64XX_GPP(12), S3C_GPIO_OUTPUT);		// Manual chip select pin as used in 6410_set_cs
+
+    	gpio_direction_output(S3C64XX_GPP(12), 1);
+	mdelay(1);
+    	gpio_direction_output(S3C64XX_GPP(12), 0);
+	msleep(200);
+    	gpio_direction_output(S3C64XX_GPP(12), 1);
 };
 
 static struct s3c64xx_spi_csinfo s3c64xx_spi0_csinfo = {
   	.fb_delay=0x3,
-  	.line=S3C64XX_GPC(3),
+  	.line=S3C64XX_GPC(3), /*used for FPGA now*/
+  	//.line=S3C64XX_GPP(8),
   	.set_level=cs_set_level,
 	.cfg_io = setup_pin_cs0,
+	.cfg_fpga = cfg_fpga_pro,
 };
 
 static int mcp251x_ioSetup(struct spi_device *spi)
@@ -254,13 +290,51 @@ static struct spi_board_info __initdata forlinx6410_mc251x_info[]  = {
 	},
 };
 
+static struct mtd_partition m25p32_spiflash_part[] = {
+	[0] = {
+		.name = "Test",
+		.offset = 0,
+		.size		= (4 * SZ_1M),
+		.mask_flags	= MTD_CAP_NANDFLASH,
+	},
+#if 0
+	[1] = {
+		.name = "Test1",
+		.offset = SZ_64K,
+		.size = SZ_512K,
+		.mask_flags = MTD_WRITEABLE,
+	},
+	[2] = {
+		.name = "Test2",
+		.offset = (SZ_512K+SZ_64K),
+		.size = SZ_64K,
+		.mask_flags = MTD_WRITEABLE,
+	},
+	[3] = {
+		.name = "Free",
+		.offset = (SZ_512K+SZ_64K+SZ_64K),
+		.size = SZ_4M - (SZ_512K+SZ_128K),
+		.mask_flags = MTD_WRITEABLE,
+	},
+#endif
+};
+
 struct flash_platform_data m25p32_data = {
 	.name 		= "spi-flash",
 	.type 		= "m25p32",
-	.parts		= NULL,
-	.nr_parts	= 0,
+	.parts		= m25p32_spiflash_part,
+	.nr_parts	= ARRAY_SIZE(m25p32_spiflash_part),
 };
 
+#if 0
+static struct flash_platform_data da850evm_spiflash_data = {
+	.name		= "m25p80",
+	.parts		= da850evm_spiflash_part,
+	.nr_parts	= ARRAY_SIZE(da850evm_spiflash_part),
+	.type		= "m25p64",
+};
+#endif
+
 static struct spi_board_info __initdata spi_eeprom[] = {
 	{
 		.modalias = "m25p32",	
@@ -1184,7 +1258,9 @@ static void __init smdk6410_machine_init(void)
 	spi_register_board_info(spi_eeprom,ARRAY_SIZE(spi_eeprom));
 	samsung_keypad_set_platdata(&smdk6410_keypad_data);
 	platform_add_devices(smdk6410_devices, ARRAY_SIZE(smdk6410_devices));
-	printk(KERN_INFO "Adding SPI infomation, Check SPI register v8\n");
+	printk(KERN_INFO "Adding SPI infomation, Check SPI register v10\n");
+	printk(KERN_INFO "SPI: FPGA initialize....\n");
+	setup_spi_fpga();
 }
 
 MACHINE_START(SMDK6410, "SMDK6410")
diff --git a/arch/arm/plat-samsung/include/plat/s3c64xx-spi.h b/arch/arm/plat-samsung/include/plat/s3c64xx-spi.h
index 8b849ea..a6cb0d7 100755
--- a/arch/arm/plat-samsung/include/plat/s3c64xx-spi.h
+++ b/arch/arm/plat-samsung/include/plat/s3c64xx-spi.h
@@ -27,6 +27,7 @@ struct s3c64xx_spi_csinfo {
 	unsigned line;
 	void (*set_level)(unsigned line_id, int lvl);
 	void (*cfg_io)();
+	void (*cfg_fpga)(int val);
 };
 
 /**
diff --git a/drivers/mtd/devices/m25p80.c b/drivers/mtd/devices/m25p80.c
index 52b5bfb..9980b97 100755
--- a/drivers/mtd/devices/m25p80.c
+++ b/drivers/mtd/devices/m25p80.c
@@ -417,7 +417,7 @@ static int m25p80_write(struct mtd_info *mtd, loff_t to, size_t len,
 	struct spi_transfer t[2];
 	struct spi_message m;
 
-	DEBUG(MTD_DEBUG_LEVEL2, "%s: %s %s 0x%08x, len %zd\n",
+	printk(KERN_INFO "%s: %s %s 0x%08x, len %zd\n",
 			dev_name(&flash->spi->dev), __func__, "to",
 			(u32)to, len);
 
@@ -787,7 +787,7 @@ static spi_flash_loop_test(struct spi_device *spi)
 	memset(id, sizeof(id), 0);
 	printk(KERN_INFO "SPI: spi_flash_loop_test \n");
 
-	for (i=0; i < 10; i++) {
+	for (i=0; i < 100; i++) {
 		tmp = spi_write_then_read(spi, &code, 1, id, 5);
 		if (tmp < 0) {
 			DEBUG(MTD_DEBUG_LEVEL0, "%s: error %d reading JEDEC ID\n",
@@ -839,7 +839,7 @@ static const struct spi_device_id *__devinit jedec_probe(struct spi_device *spi)
 	jedec = jedec << 8;
 	jedec |= id[2];
 
-	jedec = 0x202016;
+	//jedec = 0x202016;
 	ext_jedec = id[3] << 8 | id[4];
 	ext_jedec = 0;
 
@@ -848,11 +848,12 @@ static const struct spi_device_id *__devinit jedec_probe(struct spi_device *spi)
 		if (info->jedec_id == jedec) {
 			if (info->ext_id != 0 && info->ext_id != ext_jedec)
 				continue;
-			spi_flash_loop_test(spi);
+			//spi_flash_loop_test(spi);
 			return &m25p_ids[tmp];
 		}
 	}
 	dev_err(&spi->dev, "unrecognized JEDEC id %06x\n", jedec);
+	printk(KERN_INFO "unrecognized JEDEC id %06x\n", jedec);
 	//spi_flash_loop_test(spi);
 	return ERR_PTR(-ENODEV);
 }
@@ -913,6 +914,8 @@ static int __devinit m25p_probe(struct spi_device *spi)
 			 * marked read-only, and we don't want to lose that
 			 * information, even if it's not 100% accurate.
 			 */
+			printk(KERN_INFO "found %s, expected %s\n",
+				 jid->name, id->name);
 			dev_warn(&spi->dev, "found %s, expected %s\n",
 				 jid->name, id->name);
 			id = jid;
@@ -992,7 +995,7 @@ static int __devinit m25p_probe(struct spi_device *spi)
 	dev_info(&spi->dev, "%s (%lld Kbytes)\n", id->name,
 			(long long)flash->mtd.size >> 10);
 
-	DEBUG(MTD_DEBUG_LEVEL2,
+	printk(KERN_INFO
 		"mtd .name = %s, .size = 0x%llx (%lldMiB) "
 			".erasesize = 0x%.8x (%uKiB) .numeraseregions = %d\n",
 		flash->mtd.name,
@@ -1002,7 +1005,7 @@ static int __devinit m25p_probe(struct spi_device *spi)
 
 	if (flash->mtd.numeraseregions)
 		for (i = 0; i < flash->mtd.numeraseregions; i++)
-			DEBUG(MTD_DEBUG_LEVEL2,
+			printk(KERN_INFO
 				"mtd.eraseregions[%d] = { .offset = 0x%llx, "
 				".erasesize = 0x%.8x (%uKiB), "
 				".numblocks = %d }\n",
diff --git a/drivers/spi/spi_s3c64xx.c b/drivers/spi/spi_s3c64xx.c
index 5ee7991..11d71a7 100755
--- a/drivers/spi/spi_s3c64xx.c
+++ b/drivers/spi/spi_s3c64xx.c
@@ -311,7 +311,7 @@ static inline void enable_cs(struct s3c64xx_spi_driver_data *sdd,
 {
 	struct s3c64xx_spi_csinfo *cs;
 
-	printk(KERN_INFO "SPI: Enable CS, High First, Low Then\n");
+	//printk(KERN_INFO "SPI: Enable CS, High First, Low Then\n");
 	if (sdd->tgl_spi != NULL) { /* If last device toggled after mssg */
 		if (sdd->tgl_spi != spi) { /* if last mssg on diff device */
 			/* Deselect the last toggled device */
@@ -615,7 +615,12 @@ static void handle_msg(struct s3c64xx_spi_driver_data *sdd,
 	u32 speed;
 	u8 bpw;
 
-	printk(KERN_INFO "SPI: Handle message in SPI controller\n");
+	//printk(KERN_INFO "SPI: Handle message in SPI controller\n");
+	if (cs->cfg_fpga) {
+		//printk(KERN_INFO "SPI: Handle SPI Message, Disable FPGA FIRST\n");
+		cs->cfg_fpga(0);
+	}
+
 	/* If Master's(controller) state differs from that needed by Slave */
 	if (sdd->cur_speed != spi->max_speed_hz
 			|| sdd->cur_mode != spi->mode
@@ -741,6 +746,11 @@ out:
 
 	if (msg->complete)
 		msg->complete(msg->context);
+
+	if (cs->cfg_fpga) {
+		//printk(KERN_INFO "SPI: Handle SPI Message, Enable FPGA\n");
+		cs->cfg_fpga(1);
+	}
 }
 
 static int acquire_dma(struct s3c64xx_spi_driver_data *sdd)
diff --git a/yaffs2 b/yaffs2
--- a/yaffs2
+++ b/yaffs2
@@ -1 +1 @@
-Subproject commit e68d2bde85a54e27f0463662619411c5fe20cc4b
+Subproject commit e68d2bde85a54e27f0463662619411c5fe20cc4b-dirty
